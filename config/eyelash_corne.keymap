#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        Control_Mod_L: Control_Mod_L {
            compatible = "zmk,behavior-hold-tap";
            label = "CONTROL_MOD_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <42 43 44 45 46 47 7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47>;
            hold-trigger-on-release;
        };

        Control_Mod_R: Control_Mod_R {
            compatible = "zmk,behavior-hold-tap";
            label = "CONTROL_MOD_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <42 43 44 45 46 47 45 46 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        Sleep {
            bindings = <&kp LA(LG(C_POWER))>;
            key-positions = <42 44>;
        };

        Reopen_closed_Tab {
            bindings = <&kp LS(LG(T))>;
            key-positions = <42 47>;
        };

        Volume_Up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <46 47>;
        };

        Volume_Down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <45 46>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <45 47>;
        };

        Brightness_Up {
            bindings = <&kp C_BRIGHTNESS_INC>;
            key-positions = <43 44>;
        };

        Brightness_Down {
            bindings = <&kp C_BRIGHTNESS_DEC>;
            key-positions = <42 43>;
        };

        Full-Screen_Left {
            bindings = <&kp LC(LEFT)>;
            key-positions = <42 28>;
        };

        Full-Screen_Right {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <47 41>;
        };

        Mission_Control {
            bindings = <&kp LC(UP_ARROW)>;
            key-positions = <28 42 47 41>;
        };
    };

    macros {
        show_or_hide_launchpad: show_or_hide_launchpad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp LS(A)>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "SHOW_OR_HIDE_LAUNCHPAD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC         &kp Q  &kp W                   &kp E                      &kp R                          &kp T                                           &kp UP                &kp Y        &kp U                           &kp I                       &kp O                   &kp P     &kp MINUS
&kp TAB         &kp A  &Control_Mod_L GLOBE S  &Control_Mod_L LEFT_ALT D  &Control_Mod_L LEFT_CONTROL F  &kp G                                 &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &Control_Mod_R RIGHT_CONTROL J  &Control_Mod_R RIGHT_ALT K  &Control_Mod_R GLOBE L  &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &Control_Mod_L LG(X) X  &Control_Mod_L LG(C) C     &Control_Mod_L LG(V) V         &kp B                    &kp SPACE              &kp DOWN              &kp N        &kp M                           &kp COMMA                   &kp PERIOD              &kp FSLH  &kp RIGHT_SHIFT
                                               &mt LG(W) LS(LC(TAB))      &lt 1 DEL                      &mt LEFT_COMMAND RETURN                                               &lt 2 SPACE  &lt 4 BACKSPACE                 &mt RG(T) RC(TAB)
            >;
        };

        NAV_and_SYSTEM_CONTROL {
            display-name = "NAV_and_SYSTEM_CONTROL";
            bindings = <
&trans          &kp C_RW  &kp C_PP              &kp C_FF              &kp LC(UP_ARROW)      &show_or_hide_launchpad                                &msc SCRL_UP                     &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans
&trans          &trans    &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))  &kp LS(PG_UP)                          &msc SCRL_LEFT  &kp RETURN      &msc SCRL_RIGHT  &kp HOME              &kp LEFT              &kp UP           &kp DOWN           &kp RIGHT        &kp END
&kp LEFT_SHIFT  &trans    &trans                &trans                &trans                &kp PG_DN                &kp C_MUTE                    &msc SCRL_DOWN                   &trans                &kp RC(LEFT)          &kp RS(RC(TAB))  &kp RC(TAB)        &kp RC(RIGHT)    &kp RIGHT_SHIFT
                                                &trans                &trans                &trans                                                                                  &trans                &trans                &trans
            >;
        };

        NUMBER_and_SYMBOL {
            display-name = "NUMBER_and_SYMBOL";
            bindings = <
&Control_Mod_L TILDE GRAVE  &Control_Mod_L EXCL NUMBER_1  &Control_Mod_L AT NUMBER_2  &Control_Mod_L HASH NUMBER_3  &Control_Mod_L DLLR NUMBER_4  &Control_Mod_L PRCNT NUMBER_5                            &msc SCRL_UP                     &Control_Mod_R CARET NUMBER_6  &Control_Mod_R AMPS NUMBER_7  &Control_Mod_R ASTRK NUMBER_8  &Control_Mod_R LPAR NUMBER_9  &Control_Mod_R RPAR NUMBER_0   &trans
&kp TAB                     &trans                        &kp GLOBE                   &kp LEFT_ALT                  &kp LEFT_CONTROL              &trans                                   &msc SCRL_LEFT  &kp RETURN      &msc SCRL_RIGHT  &mt ASTERISK PLUS              &mt SLASH MINUS               &kp EQUAL                      &mt LEFT_BRACE LEFT_BRACKET   &mt RIGHT_BRACE RIGHT_BRACKET  &mt PIPE BACKSLASH
&kp LEFT_SHIFT              &trans                        &trans                      &trans                        &trans                        &trans                         &trans                    &msc SCRL_DOWN                   &kp UNDER                      &kp PERCENT                   &kp LESS_THAN                  &kp GREATER_THAN              &kp SLASH                      &kp RIGHT_SHIFT
                                                                                      &trans                        &trans                        &mt LEFT_COMMAND RETURN                                                                   &trans                         &trans                        &trans
            >;
        };

        Fn_and_BT {
            display-name = "Fn_and_BT";
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6                                          &msc SCRL_UP                     &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR_ALL
&kp F7   &kp F8   &kp F9   &kp F10  &kp F11  &kp F12                         &msc SCRL_LEFT  &kp RETURN      &msc SCRL_RIGHT  &bootloader   &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp GLOBE     &trans        &studio_unlock
&kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18           &kp C_MUTE                    &msc SCRL_DOWN                   &sys_reset    &trans             &trans         &trans        &trans        &kp RIGHT_SHIFT
                           &trans   &trans   &kp LEFT_COMMAND                                                                 &trans        &trans             &trans
            >;
        };

        DOCS_and_RGB {
            bindings = <
&trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF                            &msc SCRL_UP                     &kp LG(LC(SPACE))     &kp LG(LA(NUMBER_0))  &kp LG(LS(NUMBER_8))  &kp LG(LS(NUMBER_7))  &kp LG(LS(NUMBER_9))  &trans
&trans  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR            &msc SCRL_LEFT  &kp RETURN      &msc SCRL_RIGHT  &kp LG(LA(NUMBER_1))  &kp LG(LA(NUMBER_2))  &kp LG(LA(NUMBER_3))  &kp LG(LA(NUMBER_4))  &kp LG(LA(NUMBER_5))  &kp LG(LA(NUMBER_6))
&trans  &trans           &trans           &trans           &trans           &rgb_ug RGB_TOG  &trans                    &msc SCRL_DOWN                   &trans                &trans                &trans                &trans                &trans                &trans
                                          &trans           &trans           &trans                                                                      &trans                &trans                &trans
            >;

            label = "DOCS_and_RGB";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_Function_and_Bluetooth {
            if-layers = <1 4>;
            then-layer = <3>;
        };
    };
};
